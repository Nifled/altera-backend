import { Injectable } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { Strategy, VerifyCallback } from 'passport-google-oauth2';
import { validateDto } from '../../common/utils/validate-dto.util';
import { OAuthLoginDto } from '../dto/oauth-login.dto';
import { ConfigService } from '@nestjs/config';

export interface GoogleProfile {
  id: string; // A unique identifier for the user, as generated by the service provider.
  displayName: string; // The name of this user, suitable for display.
  name: {
    familyName: string; // Last name
    givenName: string; // First name
  };
  emails: Array<{
    value: string;
  }>;
  photos: Array<{
    value: string; // URL of the image.
  }>;
  provider: string; //The provider with which the user authenticated (google, facebook, etc.).
}

@Injectable()
export class GoogleStrategy extends PassportStrategy(Strategy, 'google') {
  constructor(config: ConfigService) {
    super({
      clientID: config.get<string>('google.clientId'),
      clientSecret: config.get<string>('google.clientSecret'),
      callbackURL: config.get<string>('google.callbackURL'),
      scope: ['email', 'profile'],
    });
  }

  async validate(
    _accessToken: string,
    _refreshToken: string,
    profile: GoogleProfile,
    done: VerifyCallback,
  ): Promise<any> {
    const { id, name, emails } = profile;

    const userInfo: OAuthLoginDto = {
      providerName: 'google',
      providerToken: id,
      email: emails[0].value,
      firstName: name.givenName,
      lastName: name.familyName,
    };
    // TODO: add 'photo' (or similar) property on the entity

    const googleUser = await validateDto(OAuthLoginDto, userInfo);

    done(null, googleUser);
  }
}
